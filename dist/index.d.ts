import { VUtilities } from 'v-utilities';
export declare class VTools {
    static readonly ROUND_TO_DEFAULT: number;
    static readonly ALPHABET: string[];
    static readonly ROMAN_MAP: {};
    static readonly ORDERED_ROMAN_MAP: any;
    static readonly PERIOD_FREQUENCY_LEGEND: {};
    static readonly ANNUAL_FREQUENCY_TO_LABEL: {};
    static readonly PERIOD_FREQ_OPTIONS: {};
    static readonly ALL_FISCAL_PERIODS: string[];
    static readonly PERIODLY: string[];
    static readonly PERIODS: string[];
    static readonly SINGULAR_PERIODS: string[];
    static isBlank: typeof VUtilities.isBlank;
    static isObject: typeof VUtilities.isObject;
    static isArray: typeof VUtilities.isArray;
    static isDate: typeof VUtilities.isDate;
    static isString: typeof VUtilities.isString;
    static isNumeric: typeof VUtilities.isNumeric;
    static isTrue: typeof VUtilities.isTrue;
    static isFalse: typeof VUtilities.isFalse;
    static isTrueOrFalse: typeof VUtilities.isTrueOrFalse;
    static coerceToString: typeof VUtilities.coerceToString;
    static reverse: typeof VUtilities.reverse;
    static bool(value: string | null | undefined): string;
    static yesCheckbox(value: string | null | undefined): string | null;
    static check(value: string | null | undefined): string;
    static pluralize(value: string): string;
    static ambipluralize(value: string): any;
    static normalizeString(value?: string): any;
    static parseZeroPaddedInt(value?: any): number;
    static stringToDecimal(s: any): number;
    static string_to_decimal: typeof VTools.stringToDecimal;
    static stringToInteger(s: any): number;
    static string_to_integer: typeof VTools.stringToInteger;
    static variableCurrency(number: number | string, currency?: string): string | null;
    static variableInteger(number: number | string): string | null;
    static noExponentsStr(number: number | string): string;
    static decimalToStr(number: number | string, roundTo?: number): string | null;
    static decimalToPercStr(number: number | string): string;
    static percToDecimal(number: number | string): number;
    static percentThreshold(number: number | string, verbose?: boolean): string | number;
    static numberWithCommas(x: number | string): string;
    static decimalToPercentage(number: number | string, dec?: number): string;
    static roundToDecimal(value: number | string, dec?: number): number;
    static numberToWords(value: number | string): string;
    static coerceToDate(date: any, options?: {}): any;
    static formatDate(value?: any, options?: any): any;
    static formatUTCDatetimeStamp(stamp?: any, verbose?: boolean): string;
    static formatUTCDatetime(value?: any, verbose?: boolean): string;
    static formatDateSentence(date?: any, options?: {}): any;
    static labelize(str: any): string;
    static hintize(str: any): string;
    static titleize(value: string): string;
    static toRoman(value: number): string;
    static toRomanette(value: number): string;
    static toAlpha(value: number | string, result?: string): string;
    static toOrdinal(value: number): string;
    static joinArray(array: any[]): any;
    static join_array: typeof VTools.joinArray;
    static joinArray2d(array2d: any[]): any;
    static join_array2d: typeof VTools.joinArray2d;
    static joinArrayOfHashesValues(arrayOfHashes: any[]): string | any;
    static join_array_of_hashes_values: typeof VTools.joinArrayOfHashesValues;
    static hashToLines(hash: any): any[];
    static hash_to_lines: typeof VTools.hashToLines;
    static hashesToLines(hashes: any[]): string | any;
    static hashes_to_lines: typeof VTools.hashesToLines;
    static smartRecursiveFormat(obj: any): any;
    static smart_array_values: typeof VTools.smartRecursiveFormat;
    static smart_hash_values: typeof VTools.smartRecursiveFormat;
    static smart_array2d_values: typeof VTools.smartRecursiveFormat;
    static smart_array_of_hash_values: typeof VTools.smartRecursiveFormat;
    static smartFormatValue(v: any): string;
    static smart_format_value: typeof VTools.smartFormatValue;
    static valueOrHolder(value?: any): any;
    static arrayToHumanList(value?: any, options?: any): string;
    static jsFormat(val: any, fns?: any): any;
    static jsFormatVField(val: any, vFieldHelp?: any, formatterKeys?: any[]): any;
    static jsFormatVFields(item: any, vFieldsHelp?: any, formatterKeys?: any[]): any;
    static jsInputProcess(item: {}, vFieldsHelp?: {}, formatterKeys?: any[]): any;
    static jsDisplay(item: {}, vFieldsHelp?: {}): any;
    static jsInputDisplay(item: {}, vFieldsHelp?: {}): any;
}
export default VTools;
